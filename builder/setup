#!/usr/bin/perl

# base
skip("base", "base/");

# clojure
build("lein", "clojure/lein/");

# dart
build("dart:stable", "dart/dart_stable/");
build("dart:dev",    "dart/dart_dev/");

# dlang
build("dmd:2.064.2", "dlang/dmd_2.064.2/");

# rlang
build("rlang:rlang", "rlang/rlang/");

# erlang
build("kerl",          "erlang/kerl/");
build("erlang:R16B",   "erlang/erlang_R16B/");
build("erlang:R16B02", "erlang/erlang_R16B02/");
build("erlang:R16B01", "erlang/erlang_R16B01/");
skip("erlang:R15B",   "erlang/erlang_R15B/");
skip("erlang:R15B03", "erlang/erlang_R15B03/");
skip("erlang:R15B02", "erlang/erlang_R15B02/");
skip("erlang:R15B01", "erlang/erlang_R15B01/");

# gcc
build("gcc:4.6", "gcc/gcc_4.6/");
build("gcc:4.8", "gcc/gcc_4.8/");

# golang
build("go:1.2", "golang/go_1.2/");
build("go:1.1", "golang/go_1.1/");
build("go:1.0", "golang/go_1.0/");

# groovy
skip("groovy", "groovy/groovy/");

# haskell
build("haskell:7.4", "haskell/haskell_7.4/");

# java
build("java:openjdk6",   "java/java_openjdk6/");
build("java:openjdk7",   "java/java_openjdk7/");
build("java:oraclejdk7", "java/java_oraclejdk7/");
build("java:oraclejdk8", "java/java_oraclejdk8/");
skip("java:android",    "java/android/");

# node
build("node:iojs", "node/node_iojs/");
build("node:0.12", "node/node_0.12/");
build("node:0.10", "node/node_0.10/");
build("node:0.8",  "node/node_0.8/");

# php
build("phpenv",  "php/phpenv");
build("php:5.4", "php/php_5.4/");
build("php:5.5", "php/php_5.5/");

# python
build("virtualenv",  "python/virtualenv");
build("python:2.7",  "python/python_2.7/");
build("python:3.2",  "python/python_3.2/")
build("python:3.3",  "python/python_3.3/");
build("python:3.4",  "python/python_3.4/");
build("python:pypy", "python/pypy/");

# ruby
build("ruby:1.9.3", "ruby/ruby_1.9.3/");
build("ruby:2.0.0", "ruby/ruby_2.0.0/");
build("ruby:2.1.0", "ruby/ruby_2.1.0/");
build("ruby:2.1.1", "ruby/ruby_2.1.1/");
build("jruby:1.7.11-openjdk6", "ruby/jruby_1.7.11_openjdk6/");
build("jruby:1.7.11-openjdk7", "ruby/jruby_1.7.11_openjdk7/");

# scala
build("scala:2.10.3", "scala/scala_2.10.3/");
build("scala:2.9.3",  "scala/scala_2.9.3/");


# function to create Docker images and print out
# the result. If image creation fails, we'll print
# out the stderr.
sub build {
	$name=$_[0];
	$path=$_[1];

	@result = `docker build -rm -t bradrydzewski/$name $path 2>&1`;
	if ( $? == 0 )
	{
		print "\033[32m ✓ CREATED\033[0m $name\n";
	}
	else
	{
		# print only the last 50 lines of a failed
		# container build.
		print @result[-50 .. -1];
		print "\033[31m ✗ FAILURE\033[0m $name\n";
	}

	# docker doesn't seem to exit with an error code
	# if the Dockerfile fails to create an image.
	# so let's proactively check to see if it exists.
	`docker images | grep bradrydzewski/$name 2>&1`;
	if ( $? == 1 )
	{
		print @result[-50 .. -1];
		print "\033[31m ✗ FAILURE\033[0m $name\n";
	}
}

sub skip {
	$name=$_[0];
	$path=$_[1];
	print "\033[33m – SKIPPED\033[0m $name\n";
}
